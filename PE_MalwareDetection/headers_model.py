import numpy as np 
import pandas as pd 

PE_SH = pd.read_csv("/Users/danielforero/Desktop/MACHINE LEARNING TUB/PROJECT/DATA/pe_section_headers.csv",header = 0)
PE_SH = PE_SH.drop(labels = ["hash"], axis = 1)

PE_SH_1 = PE_SH.iloc[0:2]
for i in range (np.int64(PE_SH.iloc[:,-1].value_counts()[0])):
    if PE_SH.iloc[i,-1] == 1:
        PE_SH_1 = PE_SH_1.append(PE_SH.iloc[i])

for i in range (np.int64(PE_SH.iloc[:,-1].value_counts()[1])):
    if PE_SH.iloc[i,-1] == 0:
        PE_SH_1 = PE_SH_1.append(PE_SH.iloc[i])
PE_SH = PE_SH_1  

from sklearn import preprocessing

x = PE_SH.values
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
PE_SH = pd.DataFrame(x_scaled)

PE_SH = PE_SH.sample(frac=1).reset_index(drop=True)

from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

X = PE_SH.iloc[:, 0:PE_SH.columns.size - 1]
Y = PE_SH.iloc[:, -1]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42) 


from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.svm import LinearSVC

SVCpipe = Pipeline([('scale', StandardScaler()), ('SVC',LinearSVC())])

param_grid = {'SVC__C':np.arange(0.01,100,5)}
linearSVC = GridSearchCV(SVCpipe,param_grid,cv=5,return_train_score=True)
linearSVC.fit(X_train,Y_train)

linear_svm = linearSVC.best_estimator_

linear_svm.fit(X_train, Y_train)

print(linear_svm.score(X_test, Y_test))

#from joblib import dump, load
#dump(linear_svm, '/Users/danielforero/Desktop/MACHINE LEARNING TUB/PROJECT/MODELS/myHeadersModel.joblib') 

import pickle
pickle.dump(linear_svm, open("/Users/danielforero/Desktop/MACHINE LEARNING TUB/PROJECT/MODELS/headersModel.pickle", 'wb'))